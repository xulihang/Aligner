AppType=JavaFX
Build1=Default,b4j.example
File1=aligner.png
File10=segmentationRules.srx
File11=splitterChooser.bjl
File12=srxPicker.bjl
File2=AssPicker.bjl
File3=BiTextFilesPicker.bjl
File4=LangaugePairSelector.bjl
File5=langcodes.txt
File6=languagesWithoutSpace.txt
File7=main.bjl
File8=progress.bjl
File9=segment.bjl
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=jcore
Library10=jshell
Library2=jfx
Library3=javaobject
Library4=jxmlsax
Library5=xmlbuilder
Library6=json
Library7=jreflection
Library8=b4jdragtome
Library9=jpoi
Module1=Project
Module10=TMX
Module11=Bleualign
Module12=assFilter
Module13=openxmlFilter
Module14=AssPicker
Module15=SplitterChooser
Module16=POIWord
Module17=XMLUtils
Module18=Map2Xml
Module19=Xml2Map
Module2=BiTextFilesPicker
Module20=progressDialog
Module3=SrxPicker
Module4=LanguagePairSelector
Module5=Utils
Module6=txtFilter
Module7=icu4j
Module8=segmentation
Module9=SRX
NumberOfFiles=12
NumberOfLibraries=10
NumberOfModules=20
Version=7.8
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

#AdditionalJar: icu4j

Sub Process_Globals
	Private fx As JFX
	Public MainForm As Form
	Private editorLV As ListView
    Private currentProject As Project
	Type Range(firstIndex As Int,lastIndex As Int)
	Private StatusLabel As Label
	Private cursorReachEnd As Boolean=False
	Private SegmentsLabel As Label

End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
	addScrollChangedEvent(editorLV)
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub MainForm_Resize (Width As Double, Height As Double)
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub MenuBar1_Action
	Dim mi As MenuItem
	mi=Sender
	Select mi.Text
		Case "_About"
			fx.Msgbox(MainForm,"Aligner"&CRLF&"@xulihang 2020","About")
		Case "_Exit"
			ExitApplication
		Case "_New"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please first close this project","")
				Return
			End If
			newProject
		Case "_Open"
			openProject
		Case "_Save"
			saveProject
		Case "_Close"
			closeProject
		Case "separate source file and target file"
			If currentProject.IsInitialized Then
				Dim filesPicker As BiTextFilesPicker
				filesPicker.Initialize
				Dim result As Map=filesPicker.ShowAndWait(currentProject.getProjectFileValue("langPair"))
				If result.ContainsKey("source")=False Then
					Return
				End If
				currentProject.loadItemsToSegments(result)
				loadSegmentsToListView
			End If
		Case "bilingual file"
			If currentProject.IsInitialized Then
				Dim response As Int=fx.Msgbox2(MainForm,"Use high precision mode for Chinese/English alignment?","","Yes","","No",fx.MSGBOX_CONFIRMATION)
				Dim highPrecison As Boolean
				If response=fx.DialogResponse.POSITIVE Then
					highPrecison=True
				Else
					highPrecison=False
				End If
				Dim fc As FileChooser
				fc.Initialize
				fc.SetExtensionFilter("Bilingual Files",Array As String("*.docx","*.txt"))
				Dim path As String=fc.ShowOpen(MainForm)
				Dim result As Map
				result.Initialize
				Dim langPair As Map
				langPair=currentProject.getProjectFileValue("langPair")
				If File.Exists(path,"") Then
					If path.EndsWith(".docx") Then
						result=openxmlFilter.getBitext(path,langPair,highPrecison)
					Else if path.EndsWith(".txt") Then
						result=txtFilter.getBitext(path,langPair,highPrecison)
					End If
					currentProject.loadItemsToSegments(result)
					loadSegmentsToListView
				End If
			End If
		Case "bilingual ass file"
			If currentProject.IsInitialized Then
				Dim assFilePicker As AssPicker
				assFilePicker.Initialize
				Dim result As Map=assFilePicker.ShowAndWait
				If result.ContainsKey("source")=False Then
					Return
				End If
				currentProject.loadItemsToSegments(result)
				loadSegmentsToListView
			End If
		Case "Docx"
			exportToDocx
		Case "Txt"
			exportToTxt
		Case "TMX"
			exportToTMX
		Case "_Segment into sentences"
			If currentProject.IsInitialized Then
				Dim srxfilePicker As SrxPicker
				srxfilePicker.Initialize
				Dim srxPath As String=srxfilePicker.ShowAndWait
				wait for (currentProject.loadSegmentsInSentenceLevel(srxPath)) Complete (temp As Object)
				loadSegmentsToListView
			End If
		Case "Align"
			If currentProject.IsInitialized Then
				wait for (ReAlignWithBleualign) Complete (temp As Object)
				loadSegmentsToListView
			End If
		Case "Export Source to TXT for Translation"
			exportSourceToTxt
	End Select
End Sub

Sub ReAlignWithBleualign As ResumableSub
	Dim response As Int=fx.Msgbox2(MainForm,"Align paragraph by paragraph (works when segments are aligned in paragraph level)?","","Yes","Cancel","No",fx.MSGBOX_CONFIRMATION)
	Dim AlignInParagraphs As Boolean
	If response=fx.DialogResponse.CANCEL Then
		Return ""
	End If
	If response=fx.DialogResponse.POSITIVE Then
		AlignInParagraphs=True
	Else
		AlignInParagraphs=False
	End If
	Dim fc As FileChooser
	fc.Initialize
	fc.SetExtensionFilter("txt", Array As String("*.txt"))
	fc.Title="Please select the translation file"
	Dim path As String=fc.ShowOpen(MainForm)
	If File.Exists(path,"") Then
		Dim segments As List
		segments.Initialize
		segments.AddAll(currentProject.segments)
		
		Dim translationListALL As List=File.ReadList(path,"")
		Dim appended As Boolean=appendTranslations(segments,translationListALL)
		If appended=False Then
			fx.Msgbox(MainForm,"Translation and source text are not aligned","")
			Return ""
		End If
		
		Dim newSegments As List
		newSegments.Initialize
		

		
		Dim paragraphs As List
		If AlignInParagraphs Then
			paragraphs=segmentsInParagraphs(segments)
		Else
			paragraphs.Initialize
			paragraphs.Add(segments)
		End If
		progressDialog.Show("Aligning...","align")
		Dim paragraphNum As Int
		For Each paragraph As List In paragraphs
			paragraphNum=paragraphNum+1
			progressDialog.update(paragraphNum,paragraphs.Size)
			If paragraph.Size<=1 Then
				newSegments.AddAll(paragraph)
				Continue
			End If
			Dim sourceList,targetList,translationList As List
			sourceList.Initialize
			targetList.Initialize
			translationList.Initialize
			For Each segment As Map In paragraph
				Dim source,target,translation As String
				source=segment.Get("source")
				target=segment.Get("target")
				translation=segment.Get("alt-translation")
				If source<>"" Then
					sourceList.Add(source)
				End If
				If target<>"" Then
					targetList.Add(target)
				End If
				If translation<>"" Then
					translationList.Add(translation)
				End If
			Next
			
			Dim ba As Bleualign
			ba.Initialize
			wait for (ba.Align(sourceList,targetList,translationList)) Complete (result As Map)
			If result.Get("success") Then
				sourceList=result.Get("sourceList")
				targetList=result.Get("targetList")
				Dim index As Int=0
				For Each item As String In sourceList
					Dim segment As Map
					segment.Initialize
					segment.Put("source",item)
					segment.Put("target",targetList.Get(index))
					index=index+1
					newSegments.Add(segment)
				Next
			Else
				newSegments.AddAll(paragraph)
			End If
		Next
		currentProject.segments.Clear
		currentProject.segments.AddAll(newSegments)
		progressDialog.close
	End If
	Return ""
End Sub

Sub appendTranslations(segments As List,translationList As List) As Boolean
	Dim new As List
	new.Initialize
	new.Addall(segments)
	Dim initTranslationSize As Int=translationList.Size
	Dim index As Int=0
	For Each segment As Map In new
		Dim source As String=segment.Get("source")
		If source<>"" Then
			If translationList.Size>0 Then
				Dim translation As String=translationList.Get(0)
				segment.Put("alt-translation",translation)
				translationList.RemoveAt(0)
			Else
				Return False
			End If
			index=index+1
		End If
	Next
	Log(index)
	Log(initTranslationSize)
	If index=initTranslationSize Then
		segments.Clear
		segments.AddAll(new)
		Log("translatoin is correct")
		Return True
	End If
	Return False
End Sub

Sub segmentsInParagraphs(segments As List) As List
	If segments.Size>0 Then
		Dim segment As Map =segments.Get(0)
		If segment.ContainsKey("id")=False Then
			Return segments
		End If
	End If
	Dim paragraphs As List
	paragraphs.Initialize
	Dim previousID As Int=0
	Dim paragraphSegments As List
	paragraphSegments.Initialize
	Dim index As Int=0
	For Each segment As Map In segments
        If segment.Get("id")<>previousID Or index=segments.Size-1 Then
			previousID=segment.Get("id")
			Dim new As List
			new.Initialize
			new.AddAll(paragraphSegments)
			paragraphs.Add(new)
			paragraphSegments.Clear
        End If
		paragraphSegments.Add(segment)
		index=index+1
	Next
	Return paragraphs
End Sub

Sub exportToDocx
	If currentProject.IsInitialized Then
		If currentProject.segments.Size<>0 Then
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("docx",Array As String("*.docx"))
			Dim path As String = fc.ShowSave(MainForm)
			If path="" Then
				Return
			End If
			Dim rows As List
			rows.Initialize
			For Each segment As Map In currentProject.segments
				Dim source,target,note As String
				source=segment.Get("source")
				target=segment.Get("target")
				note=segment.Get("note")
				rows.Add(Array As String(source,target,note))
			Next
			Dim poiw As POIWord
			poiw.Initialize("","write")
			poiw.createTable(rows,path)
			fx.Msgbox(MainForm,"Done.","")
		End If
	End If
End Sub

Sub exportToTMX
	If currentProject.IsInitialized Then
		If currentProject.segments.Size<>0 Then
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("TMX",Array As String("*.tmx"))
			Dim path As String = fc.ShowSave(MainForm)
			If path="" Then
				Return
			End If

			Dim segments As List
			segments.Initialize
			For Each segment As Map In currentProject.segments
				Dim source,target,note As String
				source=segment.Get("source")
				target=segment.Get("target")
				note=segment.GetDefault("note","")
				If source="" Or target="" Then
					Continue
				End If
				Dim bitext As Map
				bitext.Initialize
				bitext.Put("source",source)
				bitext.Put("target",target)
				bitext.Put("note",note)
				segments.Add(bitext)
			Next
			Dim langPair As Map
			langPair=currentProject.getProjectFileValue("langPair")
			'TMX.export(segments,langPair.Get("source"),langPair.Get("target"),path,False,False)
			TMX.exportQuick(segments,langPair.Get("source"),langPair.Get("target"),path)
			fx.Msgbox(MainForm,"Done.","")
		End If
	End If
End Sub

Sub exportSourceToTxt
	If currentProject.IsInitialized Then
		If currentProject.segments.Size<>0 Then
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("Txt",Array As String("*.txt"))
			Dim path As String = fc.ShowSave(MainForm)
			If path="" Then
				Return
			End If
			Dim sourceList As List
			sourceList.Initialize
			For Each segment As Map In currentProject.segments
				Dim source As String=segment.Get("source")
				If source<>"" Then
					sourceList.Add(source)
				End If
			Next
			File.WriteList(path,"",sourceList)
			fx.Msgbox(MainForm,"Done.","")
		End If
	End If
End Sub

Sub exportToTxt
	If currentProject.IsInitialized Then
		If currentProject.segments.Size<>0 Then
			Dim sc As SplitterChooser
			sc.Initialize
			sc.Title="请输入原文和译文的分隔符："
			Dim splitter As String
			splitter=sc.showAndWait
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("Txt",Array As String("*.txt"))
			Dim path As String = fc.ShowSave(MainForm)
			If path="" Then
				Return
			End If
			Dim result As StringBuilder
			result.Initialize
			For Each segment As Map In currentProject.segments
				Dim source,target,note As String
				source=segment.Get("source")
				target=segment.Get("target")
				note=segment.Get("note")
				result.Append(source).Append(splitter).Append(target).Append(splitter).Append(note.Replace(CRLF,"\n")).Append(CRLF)
			Next
			File.WriteString(path,"",result.ToString)
			fx.Msgbox(MainForm,"Done.","")
		End If
	End If
End Sub

Sub newProject
	Dim languageSelector As LanguagePairSelector
	languageSelector.Initialize
	Dim langPair As Map=languageSelector.ShowAndWait
	Dim fc As FileChooser
	fc.Initialize
	fc.SetExtensionFilter("project file",Array As String("*.alp"))
	Dim path As String=fc.ShowSave(MainForm)
	If path<>"" Then
		currentProject.Initialize(path)
		currentProject.setProjectFileValue("langPair",langPair)
		currentProject.saveProjectFile
	End If
End Sub

Sub closeProject
	Dim currentProject As Project
	editorLV.Items.Clear
End Sub

Sub openProject
	Dim fc As FileChooser
	fc.Initialize
	fc.SetExtensionFilter("project file",Array As String("*.alp"))
	Dim path As String=fc.ShowOpen(MainForm)
	If path<>"" Then
        currentProject.Initialize(path)
		currentProject.readProjectFile
		loadSegmentsToListView
	End If
End Sub

Sub loadSegmentsToListView
	If currentProject.segments<>Null And currentProject.segments.Size<>0 Then
		editorLV.Items.Clear
		For i=0 To currentProject.segments.Size-1
			editorLV.Items.Add("")
		Next
		Dim currentVisibleRange As Range
		currentVisibleRange=getVisibleRange(editorLV)
		fillPane(currentVisibleRange.firstIndex,currentVisibleRange.lastIndex)
		CallSubDelayed(Me,"ListViewParent_Resize")
	End If
End Sub

Sub saveProject
	If currentProject.IsInitialized Then
		currentProject.save
		StatusLabel.Text="Project saved at "&DateTime.Time(DateTime.Now)
	End If
End Sub

Public Sub createEmptyPane As Pane
	Dim segmentPane As Pane
	segmentPane.Initialize("segmentPane")
	segmentPane.SetSize(editorLV.Width,50dip)
	Return segmentPane
End Sub


Public Sub addTextAreaToSegmentPane(segmentpane As Pane,source As String,target As String)
	segmentpane.LoadLayout("segment")
	segmentpane.SetSize(editorLV.Width,50dip)
	Dim sourceTextArea As TextArea
	sourceTextArea=segmentpane.GetNode(0)
	sourceTextArea.Text=source
	
	addContextMenu(sourceTextArea,True)
	addKeyEvent(sourceTextArea,"sourceTextArea")
	addSelectionChangedEvent(sourceTextArea,"sourceTextAreaSelection")
	Dim targetTextArea As TextArea
	targetTextArea=segmentpane.GetNode(1)
	targetTextArea.Text=target

	addContextMenu(targetTextArea,False)
	addKeyEvent(targetTextArea,"targetTextArea")
	addSelectionChangedEvent(targetTextArea,"targetTextAreaSelection")
	sourceTextArea.Left=0
	sourceTextArea.SetSize(editorLV.Width/2-20dip,50dip)
	targetTextArea.Left=sourceTextArea.Left+sourceTextArea.Width
	targetTextArea.SetSize(editorLV.Width/2-20dip,50dip)
End Sub

Sub addContextMenu(ta As TextArea,isSource As Boolean)
	Dim cm As ContextMenu
	cm.Initialize("cm")
	Dim delMi As MenuItem
	delMi.Initialize("DELETE","delmi")
	Dim upMi As MenuItem
	upMi.Initialize("UP","upmi")
	Dim downMi As MenuItem
	downMi.Initialize("DOWN","downmi")
	Dim viewNoteMi As MenuItem
	viewNoteMi.Initialize("View Note","viewnotemi")
	Dim tagList As List
	tagList.Initialize
	tagList.Add(ta)
	tagList.Add(isSource)
	delMi.Tag=tagList
	upMi.Tag=tagList
	downMi.Tag=tagList
	viewNoteMi.Tag=tagList
	cm.MenuItems.Add(upMi)
	cm.MenuItems.Add(downMi)
	cm.MenuItems.Add(delMi)
	cm.MenuItems.Add(viewNoteMi)
	ta.ContextMenu=cm
End Sub

Sub addSelectionChangedEvent(textarea1 As TextArea,eventName As String)
	Dim Obj As Reflector
	Obj.Target = textarea1
	Obj.AddChangeListener(eventName, "selectionProperty")
	
End Sub

Sub addKeyEvent(textarea1 As TextArea,eventName As String)
	Dim CJO As JavaObject = textarea1
	Dim O As Object = CJO.CreateEventFromUI("javafx.event.EventHandler",eventName&"_KeyPressed",Null)
	CJO.RunMethod("setOnKeyPressed",Array(O))
	CJO.RunMethod("setFocusTraversable",Array(True))
End Sub


Sub sourceTextArea_KeyPressed_Event (MethodName As String, Args() As Object) As Object
	Dim sourceTextArea As TextArea
	sourceTextArea=Sender

	Dim KEvt As JavaObject = Args(0)
	Dim result As String
	result=KEvt.RunMethod("getCode",Null)
	Log(result)
	If result="ENTER" Then
		splitSegment(sourceTextArea,True)
	Else if result="DELETE" Then
		mergeSegment(sourceTextArea,True)
	Else if result="DOWN" Then
		If 	cursorReachEnd=False Then
			cursorReachEnd=True
		Else
			changeSegment(1,sourceTextArea,0)
		End If
	Else if result="UP" Then
		If 	cursorReachEnd=False Then
			cursorReachEnd=True
		Else
			changeSegment(-1,sourceTextArea,0)
		End If
	else if result="TAB" Then
		changeTextArea(sourceTextArea,1)
	End If
End Sub

Sub targetTextArea_KeyPressed_Event (MethodName As String, Args() As Object) As Object
	Dim KEvt As JavaObject = Args(0)
	Dim result As String
	result=KEvt.RunMethod("getCode",Null)
	Log(result)
	Dim targetTextArea As TextArea
	targetTextArea=Sender
	If result="ENTER" Then
	    splitSegment(targetTextArea,False)
	Else if result="DELETE" Then
		mergeSegment(targetTextArea,False)
	Else if result="DOWN" Then
		If 	cursorReachEnd=False Then
			cursorReachEnd=True
		Else
			changeSegment(1,targetTextArea,1)
		End If
	Else if result="UP" Then
		If 	cursorReachEnd=False Then
			cursorReachEnd=True
		Else
			changeSegment(-1,targetTextArea,1)
		End If
	else if result="TAB" Then
		changeTextArea(targetTextArea,0)
	End If
End Sub

Sub sourceTextAreaSelection_changed(old As Object, new As Object)
	cursorReachEnd=False
End Sub

Sub targetTextAreaSelection_changed(old As Object, new As Object)
	cursorReachEnd=False
End Sub

Sub changeTextArea(TextArea As TextArea,nodeIndex As Int)
	TextArea.Text=TextArea.Text.Replace("	","")
	Dim pane As Pane
	pane=TextArea.Parent
	Dim theOtherTA As TextArea
	theOtherTA=pane.GetNode(nodeIndex)
	theOtherTA.RequestFocus
End Sub


Sub changeSegment(offset As Int,TextArea As TextArea,nodeIndex As Int)
	Try
		TextArea.Text=TextArea.Text.Replace(CRLF,"")
		
		Dim pane As Pane
		pane=TextArea.Parent
		Dim index As Int
		index=editorLV.Items.IndexOf(pane)
		If index+offset>=editorLV.Items.Size Or index+offset<0 Then
			Return
		End If
		Dim nextPane As Pane
		nextPane=editorLV.Items.Get(index+offset)
		Dim nextTA As TextArea
		nextTA=nextPane.GetNode(nodeIndex)
		nextTA.RequestFocus
		updateSegmentsLabel(nextTA)
		Dim visibleRange As Range
		visibleRange=getVisibleRange(editorLV)
		If index+offset<visibleRange.firstIndex+1 Or index+offset>visibleRange.lastIndex-1 Then
			If offset<0 Then
				editorLV.ScrollTo(index+offset)
			Else
				editorLV.ScrollTo(index+offset-visibleRange.lastIndex+visibleRange.firstIndex+1)
			End If
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Public Sub fillPane(FirstIndex As Int, LastIndex As Int)
	Try
		Dim segments As List
		segments=currentProject.segments
	Catch
		Log(LastException)
		Return
	End Try
	Log("fillPane")
	Dim ExtraSize As Int
	ExtraSize=15
	For i = Max(0,FirstIndex-ExtraSize*2) To Min(editorLV.Items.Size - 1,LastIndex+ExtraSize*2)
		If i > FirstIndex - ExtraSize And i < LastIndex + ExtraSize Then
			'visible+
			If editorLV.Items.Get(i)="" Then

				Dim segmentPane As Pane
				segmentPane=createEmptyPane
				Dim bitext As Map
				bitext=segments.Get(i)
				addTextAreaToSegmentPane(segmentPane,bitext.Get("source"),bitext.Get("target"))
				editorLV.Items.Set(i,segmentPane)
			End If
		Else
			'not visible
			editorLV.Items.Set(i,"")
		End If
	Next
End Sub



'------------------------

Sub ListView1_ScrollPosition_Changed(OldVal As Object,NewVal As Object)
	CallSubDelayed(Me,"checkVisibleRange")
End Sub

Sub checkVisibleRange
	Try
		Sleep(50)
		Dim currentVisibleRange As Range
		currentVisibleRange=getVisibleRange(editorLV)
		fillPane(currentVisibleRange.firstIndex,currentVisibleRange.lastIndex)
		CallSubDelayed(Me,"ListViewParent_Resize")
	Catch
		Log(LastException)
	End Try
End Sub

Sub addScrollChangedEvent(lv As ListView)
	Try
		Dim jo As JavaObject
		jo=lv
		Dim ListViewScrollBar As JavaObject
		ListViewScrollBar=jo.RunMethodJO("lookup",Array(".scroll-bar:vertical"))
		Dim r As Reflector
		r.Target=ListViewScrollBar
		r.AddChangeListener("ListView1_ScrollPosition","valueProperty")
	Catch
		Log(LastException)
	End Try
End Sub

Sub getVisibleRange(lv As ListView) As Range
	Dim visibleRange As Range
	visibleRange.Initialize
	Try
		Dim jo As JavaObject
		jo=lv
		Dim VirtualFlow As JavaObject
		VirtualFlow=jo.RunMethodJO("getSkin",Null).RunMethodJO("getChildren",Null).RunMethodJO("get",Array(0))
		Dim lastVisibleCell As JavaObject
		lastVisibleCell=VirtualFlow.RunMethodJO("getLastVisibleCell",Null)
		Dim firstVisibleCell As JavaObject
		firstVisibleCell=VirtualFlow.RunMethodJO("getFirstVisibleCell",Null)
		visibleRange.firstIndex=firstVisibleCell.RunMethod("getIndex",Null)
		visibleRange.lastIndex=lastVisibleCell.RunMethod("getIndex",Null)
	Catch
		Log(LastException)
	End Try
	Return visibleRange
End Sub


Sub ListViewParent_Resize

	Dim lv As ListView
	lv=editorLV
	Dim visibleRange As Range=getVisibleRange(lv)
	Dim FirstVisibleIndex,LastVisibleIndex As Int
	FirstVisibleIndex=visibleRange.firstIndex
	LastVisibleIndex=visibleRange.lastIndex
	If lv.Items.Size=0 Then
		Return
	End If
	Dim itemWidth As Double = lv.Width
	Dim ExtraSize As Int
	ExtraSize=3
	For i = Max(0, FirstVisibleIndex - ExtraSize) To Min(LastVisibleIndex + ExtraSize,editorLV.Items.Size - 1)
		Try
			Dim p As Pane
			p=lv.Items.Get(i)
		Catch
			'Log(LastException)
			Continue
		End Try
		Dim sourceTa As TextArea = p.GetNode(0)
		Dim targetTa As TextArea = p.GetNode(1)
		Dim sourcelbl,targetlbl As Label
		sourcelbl.Initialize("")
		targetlbl.Initialize("")
		sourcelbl.Font=fx.DefaultFont(16)
		targetlbl.Font=fx.DefaultFont(16)
		Dim sourceHeight,targetHeight As Int
		Dim sourceLineHeight As Int=Utils.MeasureMultilineTextHeight(sourcelbl.Font,itemWidth/2-20dip,CRLF)
		Dim targetLineHeight As Int=Utils.MeasureMultilineTextHeight(targetlbl.Font,itemWidth/2-20dip,CRLF)
		sourceHeight=Utils.MeasureMultilineTextHeight(sourcelbl.Font,itemWidth/2-20dip,sourceTa.Text)+sourceLineHeight
		targetHeight=Utils.MeasureMultilineTextHeight(targetlbl.Font,itemWidth/2-20dip,targetTa.Text)+targetLineHeight
		Dim h As Int = Max(Max(20, sourceHeight + 10), targetHeight + 10)
		setLayout(p,i,h)
	Next
End Sub


Public Sub setLayout(p As Pane,index As Int,h As Int)
	Dim itemwidth As Double
	itemwidth=editorLV.Width
	p.Left=0
	p.SetSize(itemwidth-40dip,h)
	Dim sourceTa As TextArea = p.GetNode(0)
	Dim targetTa As TextArea = p.GetNode(1)
	sourceTa.Left=0
	sourceTa.SetSize(itemwidth/2-20dip,h)
	targetTa.Left=itemwidth/2-20dip
	targetTa.SetSize(itemwidth/2-20dip,h)
End Sub

Sub mergeSegment(TextArea As TextArea,isSource As Boolean)
	Dim index As Int
	index=editorLV.Items.IndexOf(TextArea.Parent)
	If index+1>currentProject.segments.Size-1 Then
		Return
	End If
	Dim key As String
	Dim textIndex As Int
	If isSource Then
		key="source"
		textIndex=0
	Else
		key="target"
		textIndex=1
	End If
	
	Dim nextPane As Pane
	nextPane=editorLV.Items.Get(index+1)
	Dim nextTa As TextArea
	nextTa=nextPane.GetNode(textIndex)
	

	nextTa.Text=""
	Dim bitext As Map
	Dim nextbitext As Map
	bitext=currentProject.segments.Get(index)
	nextbitext=currentProject.segments.Get(index+1)
	
	Dim whiteSpace As String
	Dim lang As String
	Dim langPair As Map=currentProject.getProjectFileValue("langPair")
	If isSource Then
		lang=langPair.Get("source")
	Else
		lang=langPair.Get("target")
	End If
	If Utils.LanguageHasSpace(lang) Then
		whiteSpace=" "
	Else
		whiteSpace=""
	End If
	
	TextArea.Text=bitext.Get(key)&whiteSpace&nextbitext.Get(key)
	TextArea.Text=TextArea.Text.Trim
	bitext.Put(key,TextArea.Text)
	nextbitext.Put(key,"")
	

	Dim theOtherIndex As Int
	theOtherIndex=getTheOtherIndex(textIndex)
	Dim theOtherNextTa As TextArea
	theOtherNextTa=nextPane.GetNode(theOtherIndex)
	If theOtherNextTa.Text.Trim="" And nextTa.Text.Trim="" Then
		editorLV.Items.RemoveAt(index+1)
		currentProject.segments.RemoveAt(index+1)
	End If
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub splitSegment(TextArea As TextArea,isSource As Boolean)
	Dim index As Int
	index=editorLV.Items.IndexOf(TextArea.Parent)
	Dim textIndex As Int
	Dim key As String
	If isSource Then
		key="source"
		textIndex=0
	Else
		key="target"
		textIndex=1
	End If
	
	Dim text As String
	text=TextArea.Text.SubString2(0,TextArea.SelectionEnd)
	text=text.Replace(CRLF,"").Trim
	Dim nextText As String
	nextText=TextArea.Text.SubString2(TextArea.SelectionEnd,TextArea.Text.Length).Trim
	
	TextArea.Text=text
	
	Dim bitext As Map
	Dim nextbitext As Map
	bitext=currentProject.segments.Get(index)
	bitext.Put(key,text)

	nextbitext.Initialize
	nextbitext.Put("source","")
	nextbitext.Put("target","")
	nextbitext.Put("note","")

	
	Dim nextPane As Pane=createEmptyPane
	
	Dim nextSource,nextTarget As String
	If isSource Then
		nextSource=nextText
		nextTarget=""
	Else
		nextTarget=nextText
		nextSource=""
	End If
	nextbitext.Put("source",nextSource)
	nextbitext.Put("target",nextTarget)
	If nextSource="" And nextTarget="" Then
		Log("empty pair")
	Else
		currentProject.segments.InsertAt(index+1,nextbitext)
		addTextAreaToSegmentPane(nextPane,nextSource,nextTarget)
		editorLV.Items.InsertAt(index+1,nextPane)
	End If
	
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub



Sub targetTextArea_TextChanged (Old As String, New As String)
	Dim TextArea1 As TextArea
	TextArea1=Sender
	Try
		Dim p As Pane=TextArea1.Parent
		Dim index As Int= editorLV.Items.IndexOf(p)
		Dim bitext As Map=currentProject.segments.get(index)
		bitext.Put("target",New)
	Catch
		Log(LastException)
	End Try
End Sub

Sub sourceTextArea_TextChanged (Old As String, New As String)
	Dim TextArea1 As TextArea
	TextArea1=Sender
	Try
		Dim p As Pane=TextArea1.Parent
		Dim index As Int= editorLV.Items.IndexOf(p)
		Dim bitext As Map=currentProject.segments.get(index)
		bitext.Put("source",New)
	Catch
		Log(LastException)
	End Try
End Sub

Sub sourceTextArea_FocusChanged (HasFocus As Boolean)
	Log(HasFocus)
	Dim TextArea1 As TextArea
	TextArea1=Sender
	Try
		If HasFocus Then
			updateSegmentsLabel(TextArea1)
		End If
	Catch
		Log(LastException)
	End Try

End Sub

Sub targetTextArea_FocusChanged (HasFocus As Boolean)
	Log(HasFocus)
	Dim TextArea1 As TextArea
	TextArea1=Sender
	Try
		If HasFocus Then
			updateSegmentsLabel(TextArea1)
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub updateSegmentsLabel(TextArea1 As TextArea)
	Dim index As Int=editorLV.Items.IndexOf(TextArea1.Parent)
	SegmentsLabel.Text=index&"/"&editorLV.Items.Size
End Sub

Sub upmi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Dim tagList As List
	tagList=mi.Tag
	Dim ta As TextArea
	ta=tagList.Get(0)
	moveCell(tagList.Get(1),ta,True)
End Sub

Sub downmi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Dim tagList As List
	tagList=mi.Tag
	Dim ta As TextArea
	ta=tagList.Get(0)
	moveCell(tagList.Get(1),ta,False)
End Sub

Sub viewnotemi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Dim tagList As List
	tagList=mi.Tag
	Dim ta As TextArea
	ta=tagList.Get(0)
	Dim p As Pane
	p=ta.Parent
	Dim index As Int=editorLV.Items.IndexOf(p)
	Dim segment As Map=currentProject.segments.Get(index)
	fx.Msgbox(MainForm,segment.Get("note"),"Note")
End Sub


Sub moveCell(isSource As Boolean,ta As TextArea,isUP As Boolean)
	Dim p As Pane
	p=ta.Parent
	Dim index As Int=editorLV.Items.IndexOf(p)
	
	Dim taIndex As Int
	Dim key As String
	If isSource Then
		taIndex=0
		key="source"
	Else
		taIndex=1
		key="target"
	End If
	
	Dim theOtherIndex As Int
	If isUP Then
		theOtherIndex=index-1
	Else
		theOtherIndex=index+1
	End If
	If theOtherIndex<0 Or theOtherIndex>currentProject.segments.Size-1 Then
		Return
	End If

	Dim bitext,theOtherbitext As Map
	bitext=currentProject.segments.Get(index)
	theOtherbitext=currentProject.segments.Get(theOtherIndex)
	Dim temp As String=bitext.Get(key)
	bitext.Put(key,theOtherbitext.Get(key))
	theOtherbitext.Put(key,temp)


	ta.Text=bitext.Get(key)

	If editorLV.Items.Get(theOtherIndex)<>"" Then
		Dim theOtherPane As Pane
		theOtherPane=editorLV.Items.Get(theOtherIndex)
		Dim theOtherTa As TextArea
		theOtherTa=theOtherPane.GetNode(taIndex)
		theOtherTa.Text=theOtherbitext.Get(key)
	End If
	
End Sub

Sub delmi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Dim tagList As List
	tagList=mi.Tag
	Dim ta As TextArea
	ta=tagList.Get(0)
	deleteCell(tagList.Get(1),ta)
End Sub

Sub deleteCell(isSource As Boolean,ta As TextArea)
	Dim p As Pane
	p=ta.Parent
	
	Dim taIndex As Int
	Dim key As String
	If isSource Then
		taIndex=0
		key="source"
	Else
		taIndex=1
		key="target"
	End If
	Dim theOtherIndex As Int
	theOtherIndex=getTheOtherIndex(taIndex)
	
	Dim index As Int
	index=editorLV.Items.IndexOf(p)

	Dim size As Int
	size=editorLV.Items.Size

	For i=index To size-2
		Dim nextIndex As Int=i+1
		Dim bitext As Map
		bitext=currentProject.segments.Get(i)
        Dim nextbitext As Map
		nextbitext=currentProject.segments.Get(nextIndex)
		bitext.Put(key,nextbitext.Get(key))
		
		If editorLV.Items.Get(i)<>"" Then 
			Dim p As Pane
			Dim ta As TextArea
			p=editorLV.Items.Get(i)
			ta=p.GetNode(taIndex)
			ta.Text=bitext.Get(key)
		End If
        If editorLV.Items.Get(nextIndex)<>"" Then
			Dim nextPane As Pane
			nextPane=editorLV.Items.Get(nextIndex)
			Dim nextTa As TextArea
			nextTa=nextPane.GetNode(taIndex)
			nextTa.Text=nextbitext.Get(key)
		End If
	Next
	
	'set the last segment empty
	Dim bitext As Map
	bitext=currentProject.segments.Get(size-1)
	bitext.put(key,"")
	If editorLV.Items.Get(size-1)<>"" Then
		Dim p As Pane
		p=editorLV.Items.Get(size-1)
		Dim ta As TextArea
		ta=p.GetNode(taIndex)
		ta.Text=""
	End If
	
	Dim toRemoveIndexList As List
	toRemoveIndexList.Initialize
	Dim index As Int=0
	For Each bitext As Map In currentProject.segments
		If bitext.Get("source")="" And bitext.Get("target")="" Then
			toRemoveIndexList.Add(index)
		End If
		index=index+1
	Next
	toRemoveIndexList.Sort(False)
    For Each index As Int In toRemoveIndexList
		currentProject.segments.RemoveAt(index)
		editorLV.Items.RemoveAt(index)
    Next
End Sub


Sub getTheOtherIndex(textIndex As Int) As Int
	Dim theOtherIndex As Int
	If textIndex=0 Then
		theOtherIndex=1
	Else
		theOtherIndex=0
	End If
	Return theOtherIndex
End Sub
